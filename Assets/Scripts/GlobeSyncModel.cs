using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class GlobeSyncModel
{
    [RealtimeProperty(1, true, true)]
    private string _currMarkerTitle;

    [RealtimeProperty(2, true, true)]
    private int _currMapLayer;

    [RealtimeProperty(3, true, true)]
    private Vector3 _globeRoration;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class GlobeSyncModel : RealtimeModel {
    public string currMarkerTitle {
        get {
            return _currMarkerTitleProperty.value;
        }
        set {
            if (_currMarkerTitleProperty.value == value) return;
            _currMarkerTitleProperty.value = value;
            InvalidateReliableLength();
            FireCurrMarkerTitleDidChange(value);
        }
    }
    
    public int currMapLayer {
        get {
            return _currMapLayerProperty.value;
        }
        set {
            if (_currMapLayerProperty.value == value) return;
            _currMapLayerProperty.value = value;
            InvalidateReliableLength();
            FireCurrMapLayerDidChange(value);
        }
    }
    
    public UnityEngine.Vector3 globeRoration {
        get {
            return _globeRorationProperty.value;
        }
        set {
            if (_globeRorationProperty.value == value) return;
            _globeRorationProperty.value = value;
            InvalidateReliableLength();
            FireGlobeRorationDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(GlobeSyncModel model, T value);
    public event PropertyChangedHandler<string> currMarkerTitleDidChange;
    public event PropertyChangedHandler<int> currMapLayerDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> globeRorationDidChange;
    
    public enum PropertyID : uint {
        CurrMarkerTitle = 1,
        CurrMapLayer = 2,
        GlobeRoration = 3,
    }
    
    #region Properties
    
    private ReliableProperty<string> _currMarkerTitleProperty;
    
    private ReliableProperty<int> _currMapLayerProperty;
    
    private ReliableProperty<UnityEngine.Vector3> _globeRorationProperty;
    
    #endregion
    
    public GlobeSyncModel() : base(null) {
        _currMarkerTitleProperty = new ReliableProperty<string>(1, _currMarkerTitle);
        _currMapLayerProperty = new ReliableProperty<int>(2, _currMapLayer);
        _globeRorationProperty = new ReliableProperty<UnityEngine.Vector3>(3, _globeRoration);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _currMarkerTitleProperty.UnsubscribeCallback();
        _currMapLayerProperty.UnsubscribeCallback();
        _globeRorationProperty.UnsubscribeCallback();
    }
    
    private void FireCurrMarkerTitleDidChange(string value) {
        try {
            currMarkerTitleDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCurrMapLayerDidChange(int value) {
        try {
            currMapLayerDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGlobeRorationDidChange(UnityEngine.Vector3 value) {
        try {
            globeRorationDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _currMarkerTitleProperty.WriteLength(context);
        length += _currMapLayerProperty.WriteLength(context);
        length += _globeRorationProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _currMarkerTitleProperty.Write(stream, context);
        writes |= _currMapLayerProperty.Write(stream, context);
        writes |= _globeRorationProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.CurrMarkerTitle: {
                    changed = _currMarkerTitleProperty.Read(stream, context);
                    if (changed) FireCurrMarkerTitleDidChange(currMarkerTitle);
                    break;
                }
                case (uint) PropertyID.CurrMapLayer: {
                    changed = _currMapLayerProperty.Read(stream, context);
                    if (changed) FireCurrMapLayerDidChange(currMapLayer);
                    break;
                }
                case (uint) PropertyID.GlobeRoration: {
                    changed = _globeRorationProperty.Read(stream, context);
                    if (changed) FireGlobeRorationDidChange(globeRoration);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _currMarkerTitle = currMarkerTitle;
        _currMapLayer = currMapLayer;
        _globeRoration = globeRoration;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
