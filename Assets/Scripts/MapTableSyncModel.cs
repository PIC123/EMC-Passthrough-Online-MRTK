using Microsoft.Geospatial;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class MapTableSyncModel {
    [RealtimeProperty(1, true, true)]
    private double _latitude;

    [RealtimeProperty(2, true, true)]
    private double _longitude;

    [RealtimeProperty(3, true, true)]
    private float _zoomLevel;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class MapTableSyncModel : RealtimeModel {
    public double latitude {
        get {
            return _latitudeProperty.value;
        }
        set {
            if (_latitudeProperty.value == value) return;
            _latitudeProperty.value = value;
            InvalidateReliableLength();
            FireLatitudeDidChange(value);
        }
    }
    
    public double longitude {
        get {
            return _longitudeProperty.value;
        }
        set {
            if (_longitudeProperty.value == value) return;
            _longitudeProperty.value = value;
            InvalidateReliableLength();
            FireLongitudeDidChange(value);
        }
    }
    
    public float zoomLevel {
        get {
            return _zoomLevelProperty.value;
        }
        set {
            if (_zoomLevelProperty.value == value) return;
            _zoomLevelProperty.value = value;
            InvalidateReliableLength();
            FireZoomLevelDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(MapTableSyncModel model, T value);
    public event PropertyChangedHandler<double> latitudeDidChange;
    public event PropertyChangedHandler<double> longitudeDidChange;
    public event PropertyChangedHandler<float> zoomLevelDidChange;
    
    public enum PropertyID : uint {
        Latitude = 1,
        Longitude = 2,
        ZoomLevel = 3,
    }
    
    #region Properties
    
    private ReliableProperty<double> _latitudeProperty;
    
    private ReliableProperty<double> _longitudeProperty;
    
    private ReliableProperty<float> _zoomLevelProperty;
    
    #endregion
    
    public MapTableSyncModel() : base(null) {
        _latitudeProperty = new ReliableProperty<double>(1, _latitude);
        _longitudeProperty = new ReliableProperty<double>(2, _longitude);
        _zoomLevelProperty = new ReliableProperty<float>(3, _zoomLevel);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _latitudeProperty.UnsubscribeCallback();
        _longitudeProperty.UnsubscribeCallback();
        _zoomLevelProperty.UnsubscribeCallback();
    }
    
    private void FireLatitudeDidChange(double value) {
        try {
            latitudeDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireLongitudeDidChange(double value) {
        try {
            longitudeDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireZoomLevelDidChange(float value) {
        try {
            zoomLevelDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _latitudeProperty.WriteLength(context);
        length += _longitudeProperty.WriteLength(context);
        length += _zoomLevelProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _latitudeProperty.Write(stream, context);
        writes |= _longitudeProperty.Write(stream, context);
        writes |= _zoomLevelProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Latitude: {
                    changed = _latitudeProperty.Read(stream, context);
                    if (changed) FireLatitudeDidChange(latitude);
                    break;
                }
                case (uint) PropertyID.Longitude: {
                    changed = _longitudeProperty.Read(stream, context);
                    if (changed) FireLongitudeDidChange(longitude);
                    break;
                }
                case (uint) PropertyID.ZoomLevel: {
                    changed = _zoomLevelProperty.Read(stream, context);
                    if (changed) FireZoomLevelDidChange(zoomLevel);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _latitude = latitude;
        _longitude = longitude;
        _zoomLevel = zoomLevel;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
