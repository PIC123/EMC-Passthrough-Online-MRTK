//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/SimplestarGame/SimpleXR/Input/XRControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XRControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRControls"",
    ""maps"": [
        {
            ""name"": ""XRControlsActions"",
            ""id"": ""46a446bf-e252-490d-8feb-9285fa70477f"",
            ""actions"": [
                {
                    ""name"": ""LeftControllerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""93f7155a-e942-4720-b2ed-b1d733a19a1a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightControllerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""408a7ba1-609f-4095-95d8-2582df7e4b70"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftControllerTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""4b25e602-f46c-45d6-a9e2-b285ee395f47"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightControllerTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""18737569-10da-4e07-b525-751f5ca4b2c5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftControllerRotation"",
                    ""type"": ""Value"",
                    ""id"": ""559d1cfd-615f-48ee-8637-9f782dbbc6b6"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightControllerRotation"",
                    ""type"": ""Value"",
                    ""id"": ""8c36f394-2631-465d-a568-717db3da255a"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftControllerGrip"",
                    ""type"": ""Button"",
                    ""id"": ""ab5e2ae2-986d-441a-a951-e5251a71d1e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightControllerGrip"",
                    ""type"": ""Button"",
                    ""id"": ""96384da6-6a54-4a9f-92b2-96cebafa18f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c7d26140-a028-4e64-abc2-987855a1f3bd"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftControllerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3ddfb51-a566-4bcc-a840-b94548f15fc4"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightControllerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bada0ac0-c172-4e80-ae53-bedfee6e6c6e"",
                    ""path"": ""<ViveController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftControllerTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bed91eb-8801-4de7-a8dd-ee8daaf2ec3b"",
                    ""path"": ""<ViveController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightControllerTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3d7542a-8d75-45ed-8419-e9578187b690"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftControllerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab85a95b-6d71-4b3b-944e-ffa4f54732c8"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightControllerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fbd6b01-0654-4069-82f0-38781ca93fbc"",
                    ""path"": ""<ViveController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftControllerGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8bb36c1-516d-40f2-813c-ccbd7eb64758"",
                    ""path"": ""<ViveController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightControllerGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // XRControlsActions
        m_XRControlsActions = asset.FindActionMap("XRControlsActions", throwIfNotFound: true);
        m_XRControlsActions_LeftControllerPosition = m_XRControlsActions.FindAction("LeftControllerPosition", throwIfNotFound: true);
        m_XRControlsActions_RightControllerPosition = m_XRControlsActions.FindAction("RightControllerPosition", throwIfNotFound: true);
        m_XRControlsActions_LeftControllerTrigger = m_XRControlsActions.FindAction("LeftControllerTrigger", throwIfNotFound: true);
        m_XRControlsActions_RightControllerTrigger = m_XRControlsActions.FindAction("RightControllerTrigger", throwIfNotFound: true);
        m_XRControlsActions_LeftControllerRotation = m_XRControlsActions.FindAction("LeftControllerRotation", throwIfNotFound: true);
        m_XRControlsActions_RightControllerRotation = m_XRControlsActions.FindAction("RightControllerRotation", throwIfNotFound: true);
        m_XRControlsActions_LeftControllerGrip = m_XRControlsActions.FindAction("LeftControllerGrip", throwIfNotFound: true);
        m_XRControlsActions_RightControllerGrip = m_XRControlsActions.FindAction("RightControllerGrip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XRControlsActions
    private readonly InputActionMap m_XRControlsActions;
    private List<IXRControlsActionsActions> m_XRControlsActionsActionsCallbackInterfaces = new List<IXRControlsActionsActions>();
    private readonly InputAction m_XRControlsActions_LeftControllerPosition;
    private readonly InputAction m_XRControlsActions_RightControllerPosition;
    private readonly InputAction m_XRControlsActions_LeftControllerTrigger;
    private readonly InputAction m_XRControlsActions_RightControllerTrigger;
    private readonly InputAction m_XRControlsActions_LeftControllerRotation;
    private readonly InputAction m_XRControlsActions_RightControllerRotation;
    private readonly InputAction m_XRControlsActions_LeftControllerGrip;
    private readonly InputAction m_XRControlsActions_RightControllerGrip;
    public struct XRControlsActionsActions
    {
        private @XRControls m_Wrapper;
        public XRControlsActionsActions(@XRControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftControllerPosition => m_Wrapper.m_XRControlsActions_LeftControllerPosition;
        public InputAction @RightControllerPosition => m_Wrapper.m_XRControlsActions_RightControllerPosition;
        public InputAction @LeftControllerTrigger => m_Wrapper.m_XRControlsActions_LeftControllerTrigger;
        public InputAction @RightControllerTrigger => m_Wrapper.m_XRControlsActions_RightControllerTrigger;
        public InputAction @LeftControllerRotation => m_Wrapper.m_XRControlsActions_LeftControllerRotation;
        public InputAction @RightControllerRotation => m_Wrapper.m_XRControlsActions_RightControllerRotation;
        public InputAction @LeftControllerGrip => m_Wrapper.m_XRControlsActions_LeftControllerGrip;
        public InputAction @RightControllerGrip => m_Wrapper.m_XRControlsActions_RightControllerGrip;
        public InputActionMap Get() { return m_Wrapper.m_XRControlsActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRControlsActionsActions set) { return set.Get(); }
        public void AddCallbacks(IXRControlsActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_XRControlsActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRControlsActionsActionsCallbackInterfaces.Add(instance);
            @LeftControllerPosition.started += instance.OnLeftControllerPosition;
            @LeftControllerPosition.performed += instance.OnLeftControllerPosition;
            @LeftControllerPosition.canceled += instance.OnLeftControllerPosition;
            @RightControllerPosition.started += instance.OnRightControllerPosition;
            @RightControllerPosition.performed += instance.OnRightControllerPosition;
            @RightControllerPosition.canceled += instance.OnRightControllerPosition;
            @LeftControllerTrigger.started += instance.OnLeftControllerTrigger;
            @LeftControllerTrigger.performed += instance.OnLeftControllerTrigger;
            @LeftControllerTrigger.canceled += instance.OnLeftControllerTrigger;
            @RightControllerTrigger.started += instance.OnRightControllerTrigger;
            @RightControllerTrigger.performed += instance.OnRightControllerTrigger;
            @RightControllerTrigger.canceled += instance.OnRightControllerTrigger;
            @LeftControllerRotation.started += instance.OnLeftControllerRotation;
            @LeftControllerRotation.performed += instance.OnLeftControllerRotation;
            @LeftControllerRotation.canceled += instance.OnLeftControllerRotation;
            @RightControllerRotation.started += instance.OnRightControllerRotation;
            @RightControllerRotation.performed += instance.OnRightControllerRotation;
            @RightControllerRotation.canceled += instance.OnRightControllerRotation;
            @LeftControllerGrip.started += instance.OnLeftControllerGrip;
            @LeftControllerGrip.performed += instance.OnLeftControllerGrip;
            @LeftControllerGrip.canceled += instance.OnLeftControllerGrip;
            @RightControllerGrip.started += instance.OnRightControllerGrip;
            @RightControllerGrip.performed += instance.OnRightControllerGrip;
            @RightControllerGrip.canceled += instance.OnRightControllerGrip;
        }

        private void UnregisterCallbacks(IXRControlsActionsActions instance)
        {
            @LeftControllerPosition.started -= instance.OnLeftControllerPosition;
            @LeftControllerPosition.performed -= instance.OnLeftControllerPosition;
            @LeftControllerPosition.canceled -= instance.OnLeftControllerPosition;
            @RightControllerPosition.started -= instance.OnRightControllerPosition;
            @RightControllerPosition.performed -= instance.OnRightControllerPosition;
            @RightControllerPosition.canceled -= instance.OnRightControllerPosition;
            @LeftControllerTrigger.started -= instance.OnLeftControllerTrigger;
            @LeftControllerTrigger.performed -= instance.OnLeftControllerTrigger;
            @LeftControllerTrigger.canceled -= instance.OnLeftControllerTrigger;
            @RightControllerTrigger.started -= instance.OnRightControllerTrigger;
            @RightControllerTrigger.performed -= instance.OnRightControllerTrigger;
            @RightControllerTrigger.canceled -= instance.OnRightControllerTrigger;
            @LeftControllerRotation.started -= instance.OnLeftControllerRotation;
            @LeftControllerRotation.performed -= instance.OnLeftControllerRotation;
            @LeftControllerRotation.canceled -= instance.OnLeftControllerRotation;
            @RightControllerRotation.started -= instance.OnRightControllerRotation;
            @RightControllerRotation.performed -= instance.OnRightControllerRotation;
            @RightControllerRotation.canceled -= instance.OnRightControllerRotation;
            @LeftControllerGrip.started -= instance.OnLeftControllerGrip;
            @LeftControllerGrip.performed -= instance.OnLeftControllerGrip;
            @LeftControllerGrip.canceled -= instance.OnLeftControllerGrip;
            @RightControllerGrip.started -= instance.OnRightControllerGrip;
            @RightControllerGrip.performed -= instance.OnRightControllerGrip;
            @RightControllerGrip.canceled -= instance.OnRightControllerGrip;
        }

        public void RemoveCallbacks(IXRControlsActionsActions instance)
        {
            if (m_Wrapper.m_XRControlsActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXRControlsActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_XRControlsActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRControlsActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XRControlsActionsActions @XRControlsActions => new XRControlsActionsActions(this);
    public interface IXRControlsActionsActions
    {
        void OnLeftControllerPosition(InputAction.CallbackContext context);
        void OnRightControllerPosition(InputAction.CallbackContext context);
        void OnLeftControllerTrigger(InputAction.CallbackContext context);
        void OnRightControllerTrigger(InputAction.CallbackContext context);
        void OnLeftControllerRotation(InputAction.CallbackContext context);
        void OnRightControllerRotation(InputAction.CallbackContext context);
        void OnLeftControllerGrip(InputAction.CallbackContext context);
        void OnRightControllerGrip(InputAction.CallbackContext context);
    }
}
